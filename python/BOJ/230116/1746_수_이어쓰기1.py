# 각 자릿수의 합의 누적합을 저장해놓을 배열
array = []

# 누적합
result = 0

# N은 최대 1억이므로 이전까지의 자릿수는 8자리
for idx in range(8):
    # 각 자릿수가 바뀌기 직전까지의 총 자리수의 규칙
    # 1 ~ 9 : 9 * 10 * 1 개
    # 10 ~ 99 : (99 - 10 + 1)개의 숫자 * 2(자리 수) = 9 * (10 ** 1) * 2(자리 수)
    # 100 ~ 999 : (999 - 100 + 1)개의 숫자 * 3(자리 수) = 9 * (10 ** 2) * 3(자리 수)
    # 9 * len(N) * 10 ** (len(N) - 1) 공식이 성립
    # 자릿수별 자릿수 누적합을 지속적으로 더해가며 8자리 수까지의 자릿수 합을 저장
    # [9, 189, 2889, 38889, 488889, 5888889, 68888889, 788888889]
    result += 9 * (10 ** idx) * (idx + 1)
    array.append(result)

def number(N):
    # 1억이 들어왔을 때의 예외처리
    # 1억 바로 전까지의 누적합은 저장되어 있으므로 1억의 자릿수(9)만 더해주면 된다.
    if N == 10 ** 8:
        return array[-1] + 9
    n = len(str(N))
    # 각 자릿수 별 합 + 주어진 자릿수에서 가장 작은 값(10의 자릿수배수)을 N에서 빼서 N까지 몇 개의 수가 있는지 구하고, 자리 수를 곱한다
    # 120 => 99까지의 합 + (120 - 100의 자리에서 가장 작은 값) * 3(자리 수)
    # 189 + (120 - 100 + 1) * 3 = 252
    return array[n - 1] + (N - (10 ** n) + 1) * n

print(number(int(input())))